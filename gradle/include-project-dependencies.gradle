/*
 * Copyright 2020-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

new ProjectConfigurer(settings).doIt()

class ProjectConfigurer {
	Map projectMap = [:]
	File rootDir
	Settings settings

	ProjectConfigurer(settings) {
		this.rootDir = settings.getRootDir()
		this.settings = settings
	}
	
	
	def doIt() {
		println "Included projects:"
		this.discoverProjects()
		def deps = this.getDependendentProjects(this.rootDir)
		this.includeDependentProjects(deps)
	}


	/**
	 * Recursively searches folders starting with '../' containing a build.gradle file.
	 * @return
	 */
	def private discoverProjects() {
		this.rootDir.getParentFile().eachDirRecurse(){ dir ->
			dir.eachFileMatch({it == 'build.gradle'}, { 
				this.projectMap[dir.name] = dir
			})
		}
	}


	def private getDependendentProjects(root) {
		def deps = [] as Set
		root.eachFileMatch({it == 'build.gradle'}, {
			it.eachLine {line ->
				if (line =~ /compile\s*project/) {
					def matcher = line =~ /:[a-z-A-Z0-9]*/
					if (matcher.size() == 1) {
						def projName = matcher[0].substring(1)
						deps += projName
						deps += this.getDependendentProjects(this.projectMap[projName])
					}
				}
			}
		})
		return deps
	}


	def private includeDependentProjects(deps) {
		deps.each { projName ->
			settings.include "${projName}"
			def projDir = new File("${projectMap[projName]}")
			settings.project(":${projName}").projectDir = projDir
			println "  :${projName} => ${projDir}"
		}
	}
}
