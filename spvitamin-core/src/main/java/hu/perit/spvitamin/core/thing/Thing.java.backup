package hu.perit.spvitamin.core.thing;

import hu.perit.spvitamin.core.reflection.ReflectionUtils;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import java.lang.reflect.Field;
import java.util.Collection;
import java.util.List;
import java.util.Map;

/**
 * Using composite pattern.
 */

@Getter
@Setter
@Slf4j
@NoArgsConstructor(access = AccessLevel.PROTECTED)
public abstract class Thing
{
    private String name;

    public static Thing from(Object object)
    {
        return valueToThing(objectToValue(object));
    }

    public abstract void accept(String name, ThingVisitor visitor);

    abstract boolean isEmpty();


    private static Value objectToValue(Object object)
    {
        return new Value(object);
    }


    private static Thing valueToThing(Value value)
    {
        if (value == null)
        {
            return new Value(null);
        }

        Object object = value.getValue();

        if (object instanceof Collection<?> list)
        {
            return convertCollection(list);
        }
        else if (object instanceof Map<?, ?> map)
        {
            return convertMap(map);
        }
        else if (isSimpleObject(object))
        {
            return value;
        }

        List<Field> fields = ReflectionUtils.propertiesOf(object.getClass(), true);
        ValueMap valueMap = new ValueMap();
        for (Field field : fields)
        {
            try
            {
                field.setAccessible(true); // NOSONAR
                Object fieldValue = field.get(object);
                valueMap.getProperties().put(field.getName(), valueToThing(objectToValue(fieldValue)));
            }
            catch (IllegalAccessException e)
            {
                log.warn(e.toString());
            }
        }
        return valueMap;
    }


    private static ValueList convertCollection(Collection<?> collection)
    {
        ValueList valueList = new ValueList();
        for (Object item : collection)
        {
            valueList.getElements().add(valueToThing(objectToValue(item)));
        }
        return valueList;
    }


    private static ValueMap convertMap(Map<?, ?> map)
    {
        ValueMap valueMap = new ValueMap();
        for (Map.Entry<?, ?> entry : map.entrySet())
        {
            valueMap.getProperties().put(entry.getKey().toString(), valueToThing(objectToValue(entry.getValue())));
        }
        return valueMap;
    }


    private static boolean isSimpleObject(Object object)
    {
        if (object == null)
        {
            return true;
        }
        String packageName = object.getClass().getPackageName();
        return packageName.startsWith("java");
    }
}
